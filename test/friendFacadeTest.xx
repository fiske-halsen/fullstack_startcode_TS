import * as mongo from "mongodb";
import FriendFacade from "../src/facades/friendFacade";

import chai, { should } from "chai";
const expect = chai.expect;

//use these two lines for more streamlined tests of promise operations
import chaiAsPromised from "chai-as-promised";
chai.use(chaiAsPromised);

import bcryptjs from "bcryptjs";
import { InMemoryDbConnector } from "../src/config/dbconfig";
import { ApiError } from "../src/errors/apierror";
import { IFriend } from "../src/interfaces/IFriend";

let friendCollection: mongo.Collection;
let facade: FriendFacade;

describe("## Verify the Friends Facade ##", () => {
  before(async function () {
    //Connect to inmemory test database
    //Get the database and initialize the facade
    //Initialize friendCollection, to operate on the database without the facade
    const client = await InMemoryDbConnector.connect();
    const db = client.db();
    friendCollection = db.collection("friends");
    facade = new FriendFacade(db);
  });

  beforeEach(async () => {
    const hashedPW = await bcryptjs.hash("secret", 4);
    await friendCollection.deleteMany({});
    await friendCollection.insertMany([
      {
        firstName: "Phillip",
        lastName: "Andersen",
        email: "phillip@hotmail.com",
        password: hashedPW,
        role: "user",
      },
      {
        firstName: "Sebastian",
        lastName: "Hansen",
        email: "sebastian@hotmail.com",
        password: hashedPW,
        role: "admin",
      },
    ]);
  });

  describe("Verify the addFriend method", () => {
    it("It should Add the user Jan", async () => {
      const newFriend = {
        firstName: "Jan",
        lastName: "Olsen",
        email: "jan@b.dk",
        password: "secret",
      };
      const status = await facade.addFriend(newFriend);
      expect(status).to.be.not.null;
      const jan = await friendCollection.findOne({ email: "jan@b.dk" });
      expect(jan.firstName).to.be.equal("Jan");
    });

    it("It should not add a user with a role (validation fails)", async () => {
      const newFriend = {
        firstName: "Jan",
        lastName: "Olsen",
        email: "jan@b.dk",
        password: "secret",
        role: "admin",
      };
      //const status = await facade.addFriend(newFriend);
      //expect(async () => await facade.addFriend(newFriend)).to.throw();
      try {
        await facade.addFriend(newFriend);
        expect(false).to.be.true("Should not validate user with role");
      } catch (err) {
        expect(err instanceof ApiError).to.be.true;
      }
    });
  });

  describe("Verify the editFriend method", () => {
    it("It should change lastName to Andersen11", async () => {
      const editedFriend = {
        firstName: "Phillip",
        lastName: "Andersen11",
        email: "phillip@hotmail.com",
        password: "secret",
      };
      await facade.editFriend("phillip@hotmail.com", editedFriend);
      const phillip: IFriend = await friendCollection.findOne({
        email: "phillip@hotmail.com",
      });
      expect(phillip.lastName).to.be.equal("Andersen11");
    });
  });

  describe("Verify the deleteFriend method", () => {
    it("It should remove the user Phillip", async () => {
      const status = await facade.deleteFriend("phillip@hotmail.com");
      expect(status).to.be.equal(true);
    });
    it("It should return false, for a user that does not exist", async () => {
      const status = await facade.deleteFriend("phillip@hotmail.com111");
      expect(status).to.be.equal(false);
    });
  });

  describe("Verify the getAllFriends method", () => {
    it("It should get two friends", async () => {
      const friends = await facade.getAllFriends();
      expect(friends.length).to.be.equal(2);
    });
  });

  describe("Verify the getFriend method", () => {
    it("It should find Phillip Andersen", async () => {
      const friend = await facade.getFrind("phillip@hotmail.com");
      expect(friend.firstName).to.be.equal(friend.firstName);
    });
    it("It should not find xxx.@.b.dk", async () => {
      try {
        const friend = await facade.getFrind("xxx.@.b.dk");
        expect(false).to.be.true(
          "Should not find a friend with the given email"
        );
      } catch (err) {
        expect(err instanceof ApiError).to.be.true;
      }
    });
  });

  describe("Verify the getVerifiedUser method", () => {
    it("It should correctly validate Phillips credential,s", async () => {
      const veriefiedPhillip = await facade.getVerifiedUser(
        "phillip@hotmail.com",
        "secret"
      );
      expect(veriefiedPhillip).to.be.not.null;
    });

    it("It should NOT validate Phillips credentials", async () => {
      const nonVerified = await facade.getVerifiedUser(
        "phillip@hotmail.com",
        "wrongpassword"
      );
      expect(nonVerified).to.be.null;
    });

    it("It should NOT validate a non-existing users credentials", async () => {
      const nonExisting = await facade.getVerifiedUser(
        "xxxx@hotmail.com",
        "wrongpassword"
      );
      expect(nonExisting).to.be.null;
    });
  });
});
